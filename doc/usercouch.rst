:mod:`usercouch` --- core API
=============================

.. py:module:: usercouch
    :synopsis: Start per-user CouchDB instances for fun, profit, unit testing


.. note:: Breaking changes in 16.03!

    Starting with UserCouch 16.03, the ``usercouch.ini`` file shipped in the
    :mod:`usercouch` package disables changing the CouchDB configuration via
    the CouchDB REST API (which CouchDB itself enables by default)::

        [httpd]
        config_whitelist = [] ; Don't allow any config changes through REST API

    This change was made because of the rather extraordinary security
    consequences of this part of the CouchDB API.  Any process that can
    authenticate to a CouchDB instance with admin privileges can use this API to
    then retrieve any file (anywhere on the fileystem) that is readable by the
    CouchDB instance.

    In fact, `UserWebKit`_ leveraged this API to do just that for the sake of
    accessing UI assets when running applications from within their source tree.
    At the time this was very convenient, but in retrospect it was far too risky
    security-wise to have enabled during normal production usage.

    Although having the CouchDB configuration API enabled by default should
    raise some concern in any scenario, the potential impact is (usually)
    fairly constrained when running a system-wide CouchDB instance.  For
    example, when running a system-wide CouchDB instance (as packaged in
    Ubuntu), this API would only allow an attacker to access files readable
    by the "couchdb" system user.  In a properly configured system, this should
    generally prevent an attacker from retrieving security-sensitive files
    outside the realm of CouchDB.

    However, having the CouchDB configuration API enabled by default has much
    more severe consequences for per-user CouchDB instances as an an attacker
    could use this API to retrieve any file readable by the user, including
    scary things like private GPG and SSH keys.

    This change is especially important for `Dmedia`_ as it uses UserCouch not
    just for unit-testing, but also to start its per-user CouchDB instance when
    running normally in a production setting.

    As it's not known how UserCouch is being used in the wild outside of the
    Novacut project, a security-by-default approach seems prudent.  In other
    projects where UserCouch is being used for unit testing, it seems unlikely
    that the CouchDB configuration API is being used or is needed.  For other
    projects that rely on UserCouch to start production per-user CouchDB
    instances, they are potentially put at risk by having the CouchDB
    configuration API enabled by default, and aside from extremely specialized
    use-cases like the one for `UserWebKit`_ described above, they probably
    don't rely on the configuration API.

    You can re-enable all or parts of the configuration API by providing the
    appropriate configuration in the *extra* keyword argument when calling
    :meth:`UserCouch.bootstrap()`.  This configuration snippet is appended to
    the ``session.ini`` file generated by :class:`UserCouch` and is only used
    for the lifetime of that specific CouchDB instance.

    To make this easier when needed, UserCouch 16.03 provides a pre-built
    snippet in the :data:`ALLOW_CONFIG` constant that re-enables the entire
    CouchDB configuration API::

        ALLOW_CONFIG = """
        [httpd]
        config_whitelist =
        """

    For example, you can use :data:`ALLOW_CONFIG` like this:

    >>> import usercouch
    >>> from usercouch.misc import TempCouch
    >>> couch = TempCouch()
    >>> env = couch.bootstrap(extra=usercouch.ALLOW_CONFIG)

    In evaluated the potential security impact of the configuration API being
    enabled by default prior to UserCouch 16.03, there are a few things to keep
    in mind:

        1.  By default :meth:`UserCouch.bootstrap()` will generate a random,
            120-bit session password used only for the lifetime of that specific
            CouchDB instance.

        2.  By default the clear-text of this session password is not available
            outside the process that called :meth:`UserCouch.bootstrap()` plus
            forks of said process.  Note this session password is also not
            available to the CouchDB process thus started as initially it's
            only exposed to CouchDB via a hashed value in the single-use
            ``session.ini`` file generated by UserCouch.

        3.  Although 3rd-party code can provide their own mechanism to share the
            session password with other processes (for example, `Dmedia`_ does
            this), UserCouch does not do this on its own nor does it provide any
            built-in mechanisms for doing so.

        4.  Although local desktop applications running as your user can use the
            `Dmedia`_ DBus API to retrieve the session password, Dmedia has long
            prevented remote systems (on the local network or otherwise) from
            accessing the configuration API via reverse-proxy through the Dmedia
            REST API.  This is true even if the Dmedia TSL authentication were
            to fail.


Constants
---------

.. data:: ALLOW_CONFIG

    Pre-built configuration snipped to enable the CouchDB configuration API.

    As of UserCouch 16.03, the CouchDB configuration API is disabled by default.
    UserCouch consumers that previously relied on the configuration API can
    re-enable it by providing this constant as the *extra* keyword argument when
    calling :meth:`UserCouch.bootstrap()`.

    This constant has the following value::

        ALLOW_CONFIG = """
        [httpd]
        config_whitelist =
        """

    If you rely on the CouchDB configuration API, you should strongly consider
    defining your own configuration snipped that only white-lists the specific
    aspects of the configuration API that you use.

    See the `CouchDB documentation`_ for details.



Exceptions
----------

.. exception:: LockError(lockfile)

    Raised when lock cannot be acquired when creating a :class:`UserCouch`.

    .. attribute:: lockfile

        The path of the lockfile



:class:`Paths` class
------------------------

.. class:: Paths(basedir)

    Various files and directories within a :attr:`UserCouch.basedir`.
    
    Attributes include:

    .. attribute:: ini

        The CouchDB ``'session.ini'`` configuration file

    .. attribute:: databases

        The directory containing the CouchDB database files

    .. attribute:: views

        The directory containing the CouchDB view files

    .. attribute:: log

        A directory for log files, including those used by UserCouch itself

    .. attribute:: logfile

        The ``'couchdb.log'`` used by CouchDB

    .. attribute:: ssl

        A directory for SSL certificates and keys (not used by UserCouch)

    .. attribute:: dump

        A directory for storing JSON dumps of CouchDB databases (not used by UserCouch)



:class:`UserCouch` class
------------------------

.. class:: UserCouch(basedir)

    Starts a per-user CouchDB instance.

    For example:

    >>> import tempfile
    >>> from usercouch import UserCouch
    >>> mytmpdir = tempfile.mkdtemp()
    >>> mycouch = UserCouch(mytmpdir)
    >>> env = mycouch.bootstrap()

    .. attribute:: basedir

        The directory provided when instance was created.

    .. attribute:: paths

        A :class:`Paths` instances for handy access to the files and
        directories inside the *basedir*

    .. method:: bootstrap(auth='basic', config=None, extra=None)

        Create the one-time configuration and start CouchDB.

        *auth* must be ``'open'``, ``'basic'``, or ``'oauth'``.

        If provided, *config* must be a ``dict`` with configuration values.

        If provide, *extra* must be an ``str`` with CouchDB configuration text
        that will be appended to the session.ini file.

        The return value is an *env* dictionary that follows the
        `Microfiber`_ conventions.

    .. method:: start()

        Start (or re-start) CouchDB.

    .. method:: kill()

        Kill the CouchDB process.

        Normally this method will be called automatically when the
        :class:`UserCouch` instance is garbage collected, but in certain
        circumstances you may need to explicitly call it.

    .. method:: isalive()

        Make an HTTP request to see if the CouchDB server is alive.

    .. method:: check()
    
        Test if the CouchDB server is alive, restart it if not.

    .. method:: crash()

        Terminate the CouchDB process to simulate a CouchDB crash.



Helper functions
----------------

.. function:: random_oauth()

    Return a ``dict`` containing random OAuth 1a tokens.
    
    For example:

    >>> from usercouch import random_oauth
    >>> random_oauth()  #doctest: +SKIP
    {
        'consumer_key': 'YXOIWEJOQW4VRGNNEGT6SQYN',
        'consumer_secret': '6KFO4Y4OZQT3YGJ4ZUYOR5I2',
        'token': 'DADIN54ILMCASM2W6S77Q2KW',
        'token_secret': '6T2BFYDJLES7LPFNJOFPEBQO'
    }


.. function:: random_salt()

    Return a 128-bit hex-encoded random salt for use by :func:`couch_hashed()`.

    For example:

    >>> from usercouch import random_salt
    >>> random_salt()  #doctest: +SKIP
    'da52c844db4b8bd88ebb96d72542457a'


.. function:: couch_hashed(password, salt)

    Hash *password* using *salt*.

    This returns a CouchDB-style hashed password to be used in the session.ini
    file.  For example:

    >>> from usercouch import couch_hashed
    >>> couch_hashed('secret', 'da52c844db4b8bd88ebb96d72542457a')
    '-hashed-ddf425840fd7f81cc45d9e9f5aa484d1f60964a9,da52c844db4b8bd88ebb96d72542457a'

    Typically :class:`UserCouch` is used with a per-session random password,
    so this function means that the clear-text of the password is only stored
    in memory, is never written to disk.



.. _`Microfiber`: https://launchpad.net/microfiber
.. _`UserWebKit`: https://launchpad.net/userwebkit
.. _`Dmedia`: https://launchpad.net/dmedia
.. _`CouchDB documentation`: http://docs.couchdb.org/en/1.6.1/config/http.html#httpd/config_whitelist
